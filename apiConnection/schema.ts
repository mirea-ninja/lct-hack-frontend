/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/signin": {
    /** Войти в сервис и получить токен */
    post: operations["signin_signin_post"];
  };
  "/signup": {
    /** Зарегистирироваться в сервисе и получить токен */
    post: operations["signup_signup_post"];
  };
  "/user": {
    /** Получить список всех пользователей */
    get: operations["get_all_user_get"];
    /** Создать пользователя и вернуть его */
    post: operations["create_user_post"];
  };
  "/user/{id}": {
    /** Получить пользователя по его id */
    get: operations["get_user__id__get"];
    /** Изменить пользователя по его id (полное обновление модели) */
    put: operations["update_user__id__put"];
    /** Удалить пользователя по его id */
    delete: operations["delete_user__id__delete"];
    /** Изменить пользователя по его id (частисно обновление модели) */
    patch: operations["patch_user__id__patch"];
  };
  "/user/email/{email}": {
    /** Получить пользователя по его email */
    get: operations["get_user_email__email__get"];
  };
  "/pool": {
    /** Загрузить новый пул в сервис */
    post: operations["create_pool_post"];
  };
  "/query": {
    /** Получить список всех запросов */
    get: operations["get_all_query_get"];
  };
  "/query/{id}": {
    /** Получить запрос по его id */
    get: operations["get_query__id__get"];
    /** Изменить запрос по его id (полное обновление модели) */
    put: operations["update_query__id__put"];
    /** Удалить запрос по его id */
    delete: operations["delete_query__id__delete"];
    /** Изменить запрос по его id (частичное обновление модели) */
    patch: operations["patch_query__id__patch"];
  };
  "/query/{id}/subquery/{subid}/base-apartment": {
    /** Установить эталонный объект для подзапроса */
    post: operations["set_base_query__id__subquery__subid__base_apartment_post"];
  };
  "/query/{id}/subquery/{subid}/analogs": {
    /** Получить список аналогов для подзапроса */
    get: operations["get_analogs_query__id__subquery__subid__analogs_get"];
    /** Установить аналоги для подзапроса */
    post: operations["create_analogs_query__id__subquery__subid__analogs_post"];
  };
  "/query/{id}/subquery/{subid}/user-analogs": {
    /** Установить подзапросу выбранные аналоги */
    post: operations["set_analogs_query__id__subquery__subid__user_analogs_post"];
  };
  "/query/{id}/subquery/{subid}/apartment": {
    /** Получить список всех квартир */
    get: operations["get_all_query__id__subquery__subid__apartment_get"];
    /** Создать квартиру и вернуть её */
    post: operations["create_query__id__subquery__subid__apartment_post"];
  };
  "/query/{id}/subquery/{subid}/apartment/{aid}": {
    /** Получить квартиры по его id */
    get: operations["get_query__id__subquery__subid__apartment__aid__get"];
    /** Изменить квартиры по его id (полное обновление модели) */
    put: operations["update_query__id__subquery__subid__apartment__aid__put"];
    /** Удалить квартиры по его id */
    delete: operations["delete_query__id__subquery__subid__apartment__aid__delete"];
    /** Изменить квартиру по его id (частисно обновление модели) */
    patch: operations["patch_query__id__subquery__subid__apartment__aid__patch"];
  };
}

export interface components {
  schemas: {
    /** AdjustmentGet */
    AdjustmentGet: {
      /**
       * Trade
       * @description Корректировка на торг
       * @default -450
       */
      trade?: number;
      /**
       * Floor
       * @description Корректировка на этаж
       */
      floor: number;
      /**
       * Apt Area
       * @description Корректировка на площадь квартиры
       */
      apt_area: number;
      /**
       * Kitchen Area
       * @description Корректировка на площадь кухни
       */
      kitchen_area: number;
      /**
       * Has Balcony
       * @description Корректировка на наличие балкона
       */
      has_balcony: number;
      /**
       * Distance To Metro
       * @description Корректировка на удаленность от метро
       */
      distance_to_metro: number;
      /**
       * Quality
       * @description Корректировка на отделку
       */
      quality: number;
      /**
       * Price Trade
       * @description Цена после корректировки на торг
       */
      price_trade: number;
      /**
       * Price Area
       * @description Цена после корректировки на площадь
       */
      price_area: number;
      /**
       * Price Kitchen Area
       * @description Цена после корректировки на площадь кухни
       */
      price_kitchen_area: number;
      /**
       * Price Balcony
       * @description Цена после корректировки на наличие балкона
       */
      price_balcony: number;
      /**
       * Price Metro
       * @description Цена после корректировки на удаленность от метро
       */
      price_metro: number;
      /**
       * Price Final
       * @description Цена после корректировки на отделку
       */
      price_final: number;
      /**
       * Guid
       * Format: uuid4
       * @description Уникальный идентификатор квартиры, для которой проводилась корректировка автоматически
       */
      guid: string;
    };
    /** ApartmentBase */
    ApartmentBase: {
      /**
       * Address
       * @description Адрес квартиры
       */
      address: string;
      /**
       * Link
       * Format: uri
       * @description Ссылка на объявление
       */
      link?: string;
      /**
       * Lat
       * @description Широта
       */
      lat?: number;
      /**
       * Lon
       * @description Долгота
       */
      lon?: number;
      /**
       * Rooms
       * @description Количество комнат
       */
      rooms: number;
      /**
       * Segment
       * @description Тип жилья
       */
      segment: string;
      /**
       * Floors
       * @description Количество этажей
       */
      floors: number;
      /**
       * Walls
       * @description Материал стен
       */
      walls: string;
      /**
       * Floor
       * @description Этаж
       */
      floor: number;
      /**
       * Apartment Area
       * @description Площадь квартиры
       */
      apartment_area: number;
      /**
       * Kitchen Area
       * @description Площадь кухни
       */
      kitchen_area: number;
      /**
       * Has Balcony
       * @description Наличие балкона
       */
      has_balcony: boolean;
      /**
       * Distance To Metro
       * @description Расстояние до метро
       */
      distance_to_metro: number;
      /**
       * Quality
       * @description Отделка
       */
      quality: string;
      /**
       * M2Price
       * @description Цена за квадратный метр
       * @default 0
       */
      m2price?: number;
      /**
       * Price
       * @description Цена квартиры
       * @default 0
       */
      price?: number;
    };
    /** ApartmentCreate */
    ApartmentCreate: {
      /**
       * Address
       * @description Адрес квартиры
       */
      address: string;
      /**
       * Link
       * Format: uri
       * @description Ссылка на объявление
       */
      link?: string;
      /**
       * Lat
       * @description Широта
       */
      lat?: number;
      /**
       * Lon
       * @description Долгота
       */
      lon?: number;
      /**
       * Rooms
       * @description Количество комнат
       */
      rooms: number;
      /**
       * Segment
       * @description Тип жилья
       */
      segment: string;
      /**
       * Floors
       * @description Количество этажей
       */
      floors: number;
      /**
       * Walls
       * @description Материал стен
       */
      walls: string;
      /**
       * Floor
       * @description Этаж
       */
      floor: number;
      /**
       * Apartment Area
       * @description Площадь квартиры
       */
      apartment_area: number;
      /**
       * Kitchen Area
       * @description Площадь кухни
       */
      kitchen_area: number;
      /**
       * Has Balcony
       * @description Наличие балкона
       */
      has_balcony: boolean;
      /**
       * Distance To Metro
       * @description Расстояние до метро
       */
      distance_to_metro: number;
      /**
       * Quality
       * @description Отделка
       */
      quality: string;
      /**
       * M2Price
       * @description Цена за квадратный метр
       * @default 0
       */
      m2price?: number;
      /**
       * Price
       * @description Цена квартиры
       * @default 0
       */
      price?: number;
    };
    /** ApartmentGet */
    ApartmentGet: {
      /**
       * Address
       * @description Адрес квартиры
       */
      address: string;
      /**
       * Link
       * Format: uri
       * @description Ссылка на объявление
       */
      link?: string;
      /**
       * Lat
       * @description Широта
       */
      lat?: number;
      /**
       * Lon
       * @description Долгота
       */
      lon?: number;
      /**
       * Rooms
       * @description Количество комнат
       */
      rooms: number;
      /**
       * Segment
       * @description Тип жилья
       */
      segment: string;
      /**
       * Floors
       * @description Количество этажей
       */
      floors: number;
      /**
       * Walls
       * @description Материал стен
       */
      walls: string;
      /**
       * Floor
       * @description Этаж
       */
      floor: number;
      /**
       * Apartment Area
       * @description Площадь квартиры
       */
      apartment_area: number;
      /**
       * Kitchen Area
       * @description Площадь кухни
       */
      kitchen_area: number;
      /**
       * Has Balcony
       * @description Наличие балкона
       */
      has_balcony: boolean;
      /**
       * Distance To Metro
       * @description Расстояние до метро
       */
      distance_to_metro: number;
      /**
       * Quality
       * @description Отделка
       */
      quality: string;
      /**
       * M2Price
       * @description Цена за квадратный метр
       * @default 0
       */
      m2price?: number;
      /**
       * Price
       * @description Цена квартиры
       * @default 0
       */
      price?: number;
      /**
       * Guid
       * Format: uuid4
       * @description Уникальный идентификатор квартиры
       */
      guid: string;
    };
    /** ApartmentPatch */
    ApartmentPatch: {
      /**
       * Address
       * @description Адрес квартиры
       */
      address?: string;
      /**
       * Link
       * Format: uri
       * @description Ссылка на объявление
       */
      link?: string;
      /**
       * Lat
       * @description Широта
       */
      lat?: number;
      /**
       * Lon
       * @description Долгота
       */
      lon?: number;
      /**
       * Rooms
       * @description Количество комнат
       */
      rooms?: number;
      /**
       * Segment
       * @description Тип жилья
       */
      segment?: string;
      /**
       * Floors
       * @description Количество этажей
       */
      floors?: number;
      /**
       * Walls
       * @description Материал стен
       */
      walls?: string;
      /**
       * Floor
       * @description Этаж
       */
      floor?: number;
      /**
       * Apartment Area
       * @description Площадь квартиры
       */
      apartment_area?: number;
      /**
       * Kitchen Area
       * @description Площадь кухни
       */
      kitchen_area?: number;
      /**
       * Has Balcony
       * @description Наличие балкона
       */
      has_balcony?: boolean;
      /**
       * Distance To Metro
       * @description Расстояние до метро
       */
      distance_to_metro?: number;
      /**
       * Quality
       * @description Отделка
       */
      quality?: string;
      /**
       * M2Price
       * @description Цена за квадратный метр
       * @default 0
       */
      m2price?: number;
      /**
       * Price
       * @description Цена квартиры
       * @default 0
       */
      price?: number;
    };
    /** Body_create_pool_post */
    Body_create_pool_post: {
      /**
       * File
       * Format: binary
       * @description Excel таблица с пулом
       */
      file: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** QueryCreate */
    QueryCreate: {
      /**
       * Name
       * @description Название запроса
       */
      name?: string;
      /**
       * Input File
       * Format: uri
       * @description Ссылка на файл с входными данными
       */
      input_file: string;
      /**
       * Output File
       * Format: uri
       * @description Ссылка на файл с выходными данными
       */
      output_file?: string;
      /**
       * Sub Queries
       * @description Список подзапросов
       */
      sub_queries: components["schemas"]["SubQueryCreate"][];
      /**
       * Created By
       * Format: uuid4
       * @description Уникальный идентификатор пользователя, создавшего запись
       */
      created_by: string;
      /**
       * Updated By
       * Format: uuid4
       * @description Уникальный идентификатор пользователя, обновившего запись
       */
      updated_by: string;
    };
    /** QueryCreateBaseApartment */
    QueryCreateBaseApartment: {
      /**
       * Guid
       * Format: uuid4
       * @description Уникальный идентификатор эталонного объекта
       */
      guid: string;
    };
    /** QueryCreateUserApartments */
    QueryCreateUserApartments: {
      /**
       * Guids
       * @description Уникальные идентификаторы аналогов, устанавливаемых пользователем
       */
      guids: string[];
    };
    /** QueryGet */
    QueryGet: {
      /**
       * Name
       * @description Название запроса
       */
      name?: string;
      /**
       * Input File
       * Format: uri
       * @description Ссылка на файл с входными данными
       */
      input_file: string;
      /**
       * Output File
       * Format: uri
       * @description Ссылка на файл с выходными данными
       */
      output_file?: string;
      /**
       * Guid
       * Format: uuid4
       * @description Уникальный идентификатор записи
       */
      guid: string;
      /**
       * Sub Queries
       * @description Список подзапросов
       */
      sub_queries: components["schemas"]["SubQueryGet"][];
      /**
       * Created By
       * Format: uuid4
       * @description Уникальный идентификатор пользователя, создавшего запись
       */
      created_by: string;
      /**
       * Updated By
       * Format: uuid4
       * @description Уникальный идентификатор пользователя, обновившего запись
       */
      updated_by: string;
      /**
       * Created At
       * Format: date-time
       * @description Время создания записи
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       * @description Время последнего обновления записи
       */
      updated_at: string;
    };
    /** QueryPatch */
    QueryPatch: {
      /**
       * Name
       * @description Название запроса
       */
      name?: string;
      /**
       * Input File
       * Format: uri
       * @description Ссылка на файл с входными данными
       */
      input_file?: string;
      /**
       * Output File
       * Format: uri
       * @description Ссылка на файл с выходными данными
       */
      output_file?: string;
      /**
       * Sub Queries
       * @description Список подзапросов
       */
      sub_queries?: components["schemas"]["SubQueryCreate"][];
      /**
       * Created By
       * Format: uuid4
       * @description Уникальный идентификатор пользователя, создавшего запись
       */
      created_by?: string;
      /**
       * Updated By
       * Format: uuid4
       * @description Уникальный идентификатор пользователя, обновившего запись
       */
      updated_by?: string;
    };
    /** SubQueryCreate */
    SubQueryCreate: {
      /**
       * Input Apartments
       * @description Список квартир в подзапросе
       */
      input_apartments?: components["schemas"]["ApartmentBase"][];
      /**
       * Standart Object
       * @description Эталонный объект
       */
      standart_object?: components["schemas"]["ApartmentBase"];
      /**
       * Analogs
       * @description Список подобранных аналогов
       */
      analogs?: components["schemas"]["ApartmentBase"][];
      /**
       * Selected Analogs
       * @description Список выбранных аналогов
       */
      selected_analogs?: components["schemas"]["ApartmentBase"][];
      /**
       * Adjustments Analog Calculated
       * @description Список корректировок для аналогов
       */
      adjustments_analog_calculated?: components["schemas"]["AdjustmentGet"][];
      /**
       * Adjustments Analog User
       * @description Список корректировок для аналогов, исправленных пользователем
       */
      adjustments_analog_user?: components["schemas"]["AdjustmentGet"][];
      /**
       * Adjustments Pool Calculated
       * @description Список корректировок для пула
       */
      adjustments_pool_calculated?: components["schemas"]["AdjustmentGet"][];
      /**
       * Adjustments Pool User
       * @description Список корректировок для пула, исправленных пользователем
       */
      adjustments_pool_user?: components["schemas"]["AdjustmentGet"][];
      /**
       * Output Apartments
       * @description Список выходных квартир
       */
      output_apartments?: components["schemas"]["ApartmentBase"][];
    };
    /** SubQueryGet */
    SubQueryGet: {
      /**
       * Guid
       * Format: uuid4
       * @description Уникальный идентификатор подзапроса
       */
      guid: string;
      /**
       * Input Apartments
       * @description Список квартир в подзапросе
       */
      input_apartments?: components["schemas"]["ApartmentGet"][];
      /**
       * Standart Object
       * @description Эталонный объект
       */
      standart_object?: components["schemas"]["ApartmentGet"];
      /**
       * Analogs
       * @description Список подобранных аналогов
       */
      analogs?: components["schemas"]["ApartmentGet"][];
      /**
       * Selected Analogs
       * @description Список выбранных аналогов
       */
      selected_analogs?: components["schemas"]["ApartmentGet"][];
      /**
       * Adjustments Analog Calculated
       * @description Список корректировок для аналогов
       */
      adjustments_analog_calculated?: components["schemas"]["AdjustmentGet"][];
      /**
       * Adjustments Analog User
       * @description Список корректировок для аналогов, исправленных пользователем
       */
      adjustments_analog_user?: components["schemas"]["AdjustmentGet"][];
      /**
       * Adjustments Pool Calculated
       * @description Список корректировок для пула
       */
      adjustments_pool_calculated?: components["schemas"]["AdjustmentGet"][];
      /**
       * Adjustments Pool User
       * @description Список корректировок для пула, исправленных пользователем
       */
      adjustments_pool_user?: components["schemas"]["AdjustmentGet"][];
      /**
       * Output Apartments
       * @description Список выходных квартир
       */
      output_apartments?: components["schemas"]["ApartmentGet"][];
    };
    /** Token */
    Token: {
      /** Access Token */
      access_token: string;
    };
    /** UserAuth */
    UserAuth: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
    };
    /** UserCreate */
    UserCreate: {
      /**
       * Email
       * Format: email
       * @description Email адрес пользователя
       */
      email: string;
      /**
       * First Name
       * @description Имя пользователя
       */
      first_name: string;
      /**
       * Last Name
       * @description Фамилия пользователя
       */
      last_name: string;
      /**
       * Middle Name
       * @description Отчество пользователя(при наличии)
       */
      middle_name?: string;
      /**
       * Password
       * @description Пароль пользователя
       */
      password: string;
    };
    /** UserGet */
    UserGet: {
      /**
       * Email
       * Format: email
       * @description Email адрес пользователя
       */
      email: string;
      /**
       * First Name
       * @description Имя пользователя
       */
      first_name: string;
      /**
       * Last Name
       * @description Фамилия пользователя
       */
      last_name: string;
      /**
       * Middle Name
       * @description Отчество пользователя(при наличии)
       */
      middle_name?: string;
      /**
       * Guid
       * Format: uuid4
       * @description Уникальный идентификатор пользователя
       */
      guid: string;
      /**
       * Password
       * @description Пароль пользователя
       */
      password: string;
      /**
       * Created At
       * Format: date-time
       * @description Время создания пользователя
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       * @description Время последнего обновления пользователя
       */
      updated_at: string;
    };
    /** UserPatch */
    UserPatch: {
      /**
       * Email
       * Format: email
       * @description Email адрес пользователя
       */
      email?: string;
      /**
       * First Name
       * @description Имя пользователя
       */
      first_name?: string;
      /**
       * Last Name
       * @description Фамилия пользователя
       */
      last_name?: string;
      /**
       * Middle Name
       * @description Отчество пользователя(при наличии)
       */
      middle_name?: string;
      /**
       * Password
       * @description Пароль пользователя
       */
      password?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (Partial<string> & Partial<number>)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
}

export interface operations {
  /** Войти в сервис и получить токен */
  signin_signin_post: {
    responses: {
      /** Успешный возврат токена авторизации */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserAuth"];
      };
    };
  };
  /** Зарегистирироваться в сервисе и получить токен */
  signup_signup_post: {
    responses: {
      /** Успешный возврат токена авторизации */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
  };
  /** Получить список всех пользователей */
  get_all_user_get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Успешный возврат списка пользователей */
      200: {
        content: {
          "application/json": components["schemas"]["UserGet"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Создать пользователя и вернуть его */
  create_user_post: {
    responses: {
      /** Пользователь успешно создан */
      201: {
        content: {
          "application/json": components["schemas"]["UserGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
  };
  /** Получить пользователя по его id */
  get_user__id__get: {
    parameters: {
      path: {
        /** Id пользователя */
        id: string;
      };
    };
    responses: {
      /** Успешный возврат пользователя */
      200: {
        content: {
          "application/json": components["schemas"]["UserGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Изменить пользователя по его id (полное обновление модели) */
  update_user__id__put: {
    parameters: {
      path: {
        /** Id пользователя */
        id: string;
      };
    };
    responses: {
      /** Успешное обновление пользователя */
      200: {
        content: {
          "application/json": components["schemas"]["UserGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
  };
  /** Удалить пользователя по его id */
  delete_user__id__delete: {
    parameters: {
      path: {
        /** Id пользователя */
        id: string;
      };
    };
    responses: {
      /** Успешное удаление пользователя */
      204: never;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Изменить пользователя по его id (частисно обновление модели) */
  patch_user__id__patch: {
    parameters: {
      path: {
        /** Id пользователя */
        id: string;
      };
    };
    responses: {
      /** Успешное частичное обновление пользователя */
      200: {
        content: {
          "application/json": components["schemas"]["UserGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPatch"];
      };
    };
  };
  /** Получить пользователя по его email */
  get_user_email__email__get: {
    parameters: {
      path: {
        /** Email пользователя */
        email: string;
      };
    };
    responses: {
      /** Успешный возврат пользователя */
      200: {
        content: {
          "application/json": components["schemas"]["UserGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Загрузить новый пул в сервис */
  create_pool_post: {
    parameters: {
      query: {
        /** Название запроса */
        name?: string;
      };
    };
    responses: {
      /** Пул успешно загружен и обработан */
      201: {
        content: {
          "application/json": components["schemas"]["QueryGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_create_pool_post"];
      };
    };
  };
  /** Получить список всех запросов */
  get_all_query_get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Успешный возврат списка запросов */
      200: {
        content: {
          "application/json": components["schemas"]["QueryGet"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Получить запрос по его id */
  get_query__id__get: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
      };
    };
    responses: {
      /** Успешный возврат запроса */
      200: {
        content: {
          "application/json": components["schemas"]["QueryGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Изменить запрос по его id (полное обновление модели) */
  update_query__id__put: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
      };
    };
    responses: {
      /** Успешное обновление запроса */
      200: {
        content: {
          "application/json": components["schemas"]["QueryGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryCreate"];
      };
    };
  };
  /** Удалить запрос по его id */
  delete_query__id__delete: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
      };
    };
    responses: {
      /** Успешное удаление запроса */
      204: never;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Изменить запрос по его id (частичное обновление модели) */
  patch_query__id__patch: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
      };
    };
    responses: {
      /** Успешное частичное обновление запроса */
      200: {
        content: {
          "application/json": components["schemas"]["QueryGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryPatch"];
      };
    };
  };
  /** Установить эталонный объект для подзапроса */
  set_base_query__id__subquery__subid__base_apartment_post: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
      };
    };
    responses: {
      /** Эталонный объект успешно установлен */
      201: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryCreateBaseApartment"];
      };
    };
  };
  /** Получить список аналогов для подзапроса */
  get_analogs_query__id__subquery__subid__analogs_get: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
      };
    };
    responses: {
      /** Успешный возврат списка аналогов */
      200: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Установить аналоги для подзапроса */
  create_analogs_query__id__subquery__subid__analogs_post: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
      };
    };
    responses: {
      /** Успешная установка аналогов */
      204: never;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApartmentCreate"][];
      };
    };
  };
  /** Установить подзапросу выбранные аналоги */
  set_analogs_query__id__subquery__subid__user_analogs_post: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
      };
    };
    responses: {
      /** Аналоги успешно установлены */
      201: {
        content: {
          "application/json": components["schemas"]["AdjustmentGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryCreateUserApartments"];
      };
    };
  };
  /** Получить список всех квартир */
  get_all_query__id__subquery__subid__apartment_get: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
      };
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Успешный возврат списка квартир */
      200: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Создать квартиру и вернуть её */
  create_query__id__subquery__subid__apartment_post: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
      };
    };
    responses: {
      /** Квартира успешно создана */
      201: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApartmentCreate"];
      };
    };
  };
  /** Получить квартиры по его id */
  get_query__id__subquery__subid__apartment__aid__get: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
        /** Id квартиры */
        aid: string;
      };
    };
    responses: {
      /** Успешный возврат квартиры */
      200: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Изменить квартиры по его id (полное обновление модели) */
  update_query__id__subquery__subid__apartment__aid__put: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
        /** Id квартиры */
        aid: string;
      };
    };
    responses: {
      /** Успешное обновление квартиры */
      200: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApartmentCreate"];
      };
    };
  };
  /** Удалить квартиры по его id */
  delete_query__id__subquery__subid__apartment__aid__delete: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
        /** Id квартиры */
        aid: string;
      };
    };
    responses: {
      /** Успешное удаление квартиры */
      204: never;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Изменить квартиру по его id (частисно обновление модели) */
  patch_query__id__subquery__subid__apartment__aid__patch: {
    parameters: {
      path: {
        /** Id запроса */
        id: string;
        /** Id подзапроса */
        subid: string;
        /** Id квартиры */
        aid: string;
      };
    };
    responses: {
      /** Успешное частичное обновление квартиры */
      200: {
        content: {
          "application/json": components["schemas"]["ApartmentGet"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApartmentPatch"];
      };
    };
  };
}

export interface external {}
