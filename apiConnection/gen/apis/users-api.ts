/* tslint:disable */
/* eslint-disable */
/**
 * LCT Hack Backend
 * Backend part for LCT Hack
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HTTPValidationError } from '../models';
import { UserCreate } from '../models';
import { UserGet } from '../models';
import { UserPatch } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Создать пользователя и вернуть его
         * @summary Создание пользователя
         * @param {UserCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiUserPost: async (body: UserCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createApiUserPost.');
            }
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Удалить пользователя по его id
         * @summary Удаление пользователя по id
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiUserIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteApiUserIdDelete.');
            }
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список всех пользователей
         * @summary Получение всех пользователей
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApiUserGet: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить пользователя по его email
         * @summary Получение пользователя по email
         * @param {string} email Email пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUserEmailEmailGet: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling getApiUserEmailEmailGet.');
            }
            const localVarPath = `/api/user/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить пользователя по его id
         * @summary Получение пользователя по id
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUserIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApiUserIdGet.');
            }
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменить пользователя по его id (частисно обновление модели)
         * @summary Изменение пользователя по id (только указанные поля будут изменены)
         * @param {UserPatch} body 
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiUserIdPatch: async (body: UserPatch, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchApiUserIdPatch.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchApiUserIdPatch.');
            }
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменить пользователя по его id (полное обновление модели)
         * @summary Изменение пользователя по id
         * @param {UserCreate} body 
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiUserIdPut: async (body: UserCreate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateApiUserIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateApiUserIdPut.');
            }
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Создать пользователя и вернуть его
         * @summary Создание пользователя
         * @param {UserCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiUserPost(body: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserGet>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).createApiUserPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Удалить пользователя по его id
         * @summary Удаление пользователя по id
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiUserIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).deleteApiUserIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить список всех пользователей
         * @summary Получение всех пользователей
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllApiUserGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserGet>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getAllApiUserGet(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить пользователя по его email
         * @summary Получение пользователя по email
         * @param {string} email Email пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUserEmailEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserGet>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getApiUserEmailEmailGet(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить пользователя по его id
         * @summary Получение пользователя по id
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUserIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserGet>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getApiUserIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Изменить пользователя по его id (частисно обновление модели)
         * @summary Изменение пользователя по id (только указанные поля будут изменены)
         * @param {UserPatch} body 
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiUserIdPatch(body: UserPatch, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserGet>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).patchApiUserIdPatch(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Изменить пользователя по его id (полное обновление модели)
         * @summary Изменение пользователя по id
         * @param {UserCreate} body 
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiUserIdPut(body: UserCreate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserGet>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).updateApiUserIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Создать пользователя и вернуть его
         * @summary Создание пользователя
         * @param {UserCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiUserPost(body: UserCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<UserGet>> {
            return UsersApiFp(configuration).createApiUserPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Удалить пользователя по его id
         * @summary Удаление пользователя по id
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiUserIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UsersApiFp(configuration).deleteApiUserIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список всех пользователей
         * @summary Получение всех пользователей
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllApiUserGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserGet>>> {
            return UsersApiFp(configuration).getAllApiUserGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить пользователя по его email
         * @summary Получение пользователя по email
         * @param {string} email Email пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUserEmailEmailGet(email: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserGet>> {
            return UsersApiFp(configuration).getApiUserEmailEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить пользователя по его id
         * @summary Получение пользователя по id
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUserIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserGet>> {
            return UsersApiFp(configuration).getApiUserIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменить пользователя по его id (частисно обновление модели)
         * @summary Изменение пользователя по id (только указанные поля будут изменены)
         * @param {UserPatch} body 
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiUserIdPatch(body: UserPatch, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserGet>> {
            return UsersApiFp(configuration).patchApiUserIdPatch(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменить пользователя по его id (полное обновление модели)
         * @summary Изменение пользователя по id
         * @param {UserCreate} body 
         * @param {string} id Id пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiUserIdPut(body: UserCreate, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserGet>> {
            return UsersApiFp(configuration).updateApiUserIdPut(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Создать пользователя и вернуть его
     * @summary Создание пользователя
     * @param {UserCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async createApiUserPost(body: UserCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserGet>> {
        return UsersApiFp(this.configuration).createApiUserPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Удалить пользователя по его id
     * @summary Удаление пользователя по id
     * @param {string} id Id пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async deleteApiUserIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UsersApiFp(this.configuration).deleteApiUserIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Получить список всех пользователей
     * @summary Получение всех пользователей
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getAllApiUserGet(limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserGet>>> {
        return UsersApiFp(this.configuration).getAllApiUserGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Получить пользователя по его email
     * @summary Получение пользователя по email
     * @param {string} email Email пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getApiUserEmailEmailGet(email: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserGet>> {
        return UsersApiFp(this.configuration).getApiUserEmailEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Получить пользователя по его id
     * @summary Получение пользователя по id
     * @param {string} id Id пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getApiUserIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserGet>> {
        return UsersApiFp(this.configuration).getApiUserIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Изменить пользователя по его id (частисно обновление модели)
     * @summary Изменение пользователя по id (только указанные поля будут изменены)
     * @param {UserPatch} body 
     * @param {string} id Id пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async patchApiUserIdPatch(body: UserPatch, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserGet>> {
        return UsersApiFp(this.configuration).patchApiUserIdPatch(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Изменить пользователя по его id (полное обновление модели)
     * @summary Изменение пользователя по id
     * @param {UserCreate} body 
     * @param {string} id Id пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async updateApiUserIdPut(body: UserCreate, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserGet>> {
        return UsersApiFp(this.configuration).updateApiUserIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
