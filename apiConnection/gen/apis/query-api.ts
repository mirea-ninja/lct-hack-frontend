/* tslint:disable */
/* eslint-disable */
/**
 * LCT Hack Backend
 * Backend part for LCT Hack
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HTTPValidationError } from '../models';
import { QueryCreate } from '../models';
import { QueryGet } from '../models';
import { QueryPatch } from '../models';
import { Sort } from '../models';
/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Удалить запрос по его id
         * @summary Удаление запрос по id
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiQueryIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteApiQueryIdDelete.');
            }
            const localVarPath = `/api/query/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список всех запросов
         * @summary Получение всех запросов
         * @param {Sort} [sort] Cортировка
         * @param {Date} [start] Дата начала
         * @param {Date} [end] Дата окончания
         * @param {Array<string>} [segment] Сегмент
         * @param {Array<string>} [walls] Стены
         * @param {number} [floorsMin] Минимальное количество этажей
         * @param {number} [floorsMax] Максимальное количество этажей
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApiQueryGet: async (sort?: Sort, start?: Date, end?: Date, segment?: Array<string>, walls?: Array<string>, floorsMin?: number, floorsMax?: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }

            if (segment) {
                localVarQueryParameter['segment'] = segment;
            }

            if (walls) {
                localVarQueryParameter['walls'] = walls;
            }

            if (floorsMin !== undefined) {
                localVarQueryParameter['floors_min'] = floorsMin;
            }

            if (floorsMax !== undefined) {
                localVarQueryParameter['floors_max'] = floorsMax;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить запрос по его id
         * @summary Получение запрос по id
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiQueryIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApiQueryIdGet.');
            }
            const localVarPath = `/api/query/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменить запрос по его id (частичное обновление модели)
         * @summary Изменение запрос по id (только указанные поля будут изменены)
         * @param {QueryPatch} body 
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiQueryIdPatch: async (body: QueryPatch, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchApiQueryIdPatch.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchApiQueryIdPatch.');
            }
            const localVarPath = `/api/query/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменить запрос по его id (полное обновление модели)
         * @summary Изменение запрос по id
         * @param {QueryCreate} body 
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiQueryIdPut: async (body: QueryCreate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateApiQueryIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateApiQueryIdPut.');
            }
            const localVarPath = `/api/query/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Удалить запрос по его id
         * @summary Удаление запрос по id
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiQueryIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await QueryApiAxiosParamCreator(configuration).deleteApiQueryIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить список всех запросов
         * @summary Получение всех запросов
         * @param {Sort} [sort] Cортировка
         * @param {Date} [start] Дата начала
         * @param {Date} [end] Дата окончания
         * @param {Array<string>} [segment] Сегмент
         * @param {Array<string>} [walls] Стены
         * @param {number} [floorsMin] Минимальное количество этажей
         * @param {number} [floorsMax] Максимальное количество этажей
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllApiQueryGet(sort?: Sort, start?: Date, end?: Date, segment?: Array<string>, walls?: Array<string>, floorsMin?: number, floorsMax?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<QueryGet>>>> {
            const localVarAxiosArgs = await QueryApiAxiosParamCreator(configuration).getAllApiQueryGet(sort, start, end, segment, walls, floorsMin, floorsMax, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить запрос по его id
         * @summary Получение запрос по id
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiQueryIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryGet>>> {
            const localVarAxiosArgs = await QueryApiAxiosParamCreator(configuration).getApiQueryIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Изменить запрос по его id (частичное обновление модели)
         * @summary Изменение запрос по id (только указанные поля будут изменены)
         * @param {QueryPatch} body 
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiQueryIdPatch(body: QueryPatch, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryGet>>> {
            const localVarAxiosArgs = await QueryApiAxiosParamCreator(configuration).patchApiQueryIdPatch(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Изменить запрос по его id (полное обновление модели)
         * @summary Изменение запрос по id
         * @param {QueryCreate} body 
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiQueryIdPut(body: QueryCreate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryGet>>> {
            const localVarAxiosArgs = await QueryApiAxiosParamCreator(configuration).updateApiQueryIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Удалить запрос по его id
         * @summary Удаление запрос по id
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiQueryIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return QueryApiFp(configuration).deleteApiQueryIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список всех запросов
         * @summary Получение всех запросов
         * @param {Sort} [sort] Cортировка
         * @param {Date} [start] Дата начала
         * @param {Date} [end] Дата окончания
         * @param {Array<string>} [segment] Сегмент
         * @param {Array<string>} [walls] Стены
         * @param {number} [floorsMin] Минимальное количество этажей
         * @param {number} [floorsMax] Максимальное количество этажей
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllApiQueryGet(sort?: Sort, start?: Date, end?: Date, segment?: Array<string>, walls?: Array<string>, floorsMin?: number, floorsMax?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<QueryGet>>> {
            return QueryApiFp(configuration).getAllApiQueryGet(sort, start, end, segment, walls, floorsMin, floorsMax, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить запрос по его id
         * @summary Получение запрос по id
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiQueryIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryGet>> {
            return QueryApiFp(configuration).getApiQueryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменить запрос по его id (частичное обновление модели)
         * @summary Изменение запрос по id (только указанные поля будут изменены)
         * @param {QueryPatch} body 
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiQueryIdPatch(body: QueryPatch, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryGet>> {
            return QueryApiFp(configuration).patchApiQueryIdPatch(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменить запрос по его id (полное обновление модели)
         * @summary Изменение запрос по id
         * @param {QueryCreate} body 
         * @param {string} id Id запроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiQueryIdPut(body: QueryCreate, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryGet>> {
            return QueryApiFp(configuration).updateApiQueryIdPut(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * Удалить запрос по его id
     * @summary Удаление запрос по id
     * @param {string} id Id запроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public async deleteApiQueryIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return QueryApiFp(this.configuration).deleteApiQueryIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Получить список всех запросов
     * @summary Получение всех запросов
     * @param {Sort} [sort] Cортировка
     * @param {Date} [start] Дата начала
     * @param {Date} [end] Дата окончания
     * @param {Array<string>} [segment] Сегмент
     * @param {Array<string>} [walls] Стены
     * @param {number} [floorsMin] Минимальное количество этажей
     * @param {number} [floorsMax] Максимальное количество этажей
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public async getAllApiQueryGet(sort?: Sort, start?: Date, end?: Date, segment?: Array<string>, walls?: Array<string>, floorsMin?: number, floorsMax?: number, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<QueryGet>>> {
        return QueryApiFp(this.configuration).getAllApiQueryGet(sort, start, end, segment, walls, floorsMin, floorsMax, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Получить запрос по его id
     * @summary Получение запрос по id
     * @param {string} id Id запроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public async getApiQueryIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryGet>> {
        return QueryApiFp(this.configuration).getApiQueryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Изменить запрос по его id (частичное обновление модели)
     * @summary Изменение запрос по id (только указанные поля будут изменены)
     * @param {QueryPatch} body 
     * @param {string} id Id запроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public async patchApiQueryIdPatch(body: QueryPatch, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryGet>> {
        return QueryApiFp(this.configuration).patchApiQueryIdPatch(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Изменить запрос по его id (полное обновление модели)
     * @summary Изменение запрос по id
     * @param {QueryCreate} body 
     * @param {string} id Id запроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public async updateApiQueryIdPut(body: QueryCreate, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryGet>> {
        return QueryApiFp(this.configuration).updateApiQueryIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
