/* tslint:disable */
/* eslint-disable */
/**
 * LCT Hack Backend
 * Backend part for LCT Hack
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Analog } from '../models';
import { Analogs } from '../models';
import { ApartmentCreate } from '../models';
import { ApartmentGet } from '../models';
import { HTTPValidationError } from '../models';
import { QueryGet } from '../models';
import { SubQueryGet } from '../models';
/**
 * SubqueryApi - axios parameter creator
 * @export
 */
export const SubqueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Рассчитать аналоги для подзапроса
         * @summary Расчет аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost: async (id: string, subid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/calculate-analogs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Рассчитать пул для подзапроса
         * @summary Расчет пула для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculatePoolApiQueryIdSubquerySubidCalculatePoolPost: async (id: string, subid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calculatePoolApiQueryIdSubquerySubidCalculatePoolPost.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling calculatePoolApiQueryIdSubquerySubidCalculatePoolPost.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/calculate-pool`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Установить аналоги для подзапроса
         * @summary Установка аналогов для подзапроса
         * @param {Array<ApartmentCreate>} body 
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnalogsApiQueryIdSubquerySubidAnalogsPost: async (body: Array<ApartmentCreate>, id: string, subid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAnalogsApiQueryIdSubquerySubidAnalogsPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createAnalogsApiQueryIdSubquerySubidAnalogsPost.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling createAnalogsApiQueryIdSubquerySubidAnalogsPost.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/analogs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список аналогов для подзапроса
         * @summary Получение аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalogsApiQueryIdSubquerySubidAnalogsGet: async (id: string, subid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAnalogsApiQueryIdSubquerySubidAnalogsGet.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling getAnalogsApiQueryIdSubquerySubidAnalogsGet.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/analogs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Рассчитать аналоги для подзапроса
         * @summary Расчет аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost: async (id: string, subid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/recalculate-analogs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Установить подзапросу выбранные аналоги
         * @summary Установка аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {Analogs} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalogsApiQueryIdSubquerySubidUserAnalogsPost: async (id: string, subid: string, body?: Analogs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setAnalogsApiQueryIdSubquerySubidUserAnalogsPost.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling setAnalogsApiQueryIdSubquerySubidUserAnalogsPost.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/user-analogs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Установить эталонный объект для подзапроса
         * @summary Установка эталонного объекта
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {Analog} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBaseApiQueryIdSubquerySubidBaseApartmentPost: async (id: string, subid: string, body?: Analog, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setBaseApiQueryIdSubquerySubidBaseApartmentPost.');
            }
            // verify required parameter 'subid' is not null or undefined
            if (subid === null || subid === undefined) {
                throw new RequiredError('subid','Required parameter subid was null or undefined when calling setBaseApiQueryIdSubquerySubidBaseApartmentPost.');
            }
            const localVarPath = `/api/query/{id}/subquery/{subid}/base-apartment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subid"}}`, encodeURIComponent(String(subid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubqueryApi - functional programming interface
 * @export
 */
export const SubqueryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Рассчитать аналоги для подзапроса
         * @summary Расчет аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost(id: string, subid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryGet>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost(id, subid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Рассчитать пул для подзапроса
         * @summary Расчет пула для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculatePoolApiQueryIdSubquerySubidCalculatePoolPost(id: string, subid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryGet>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).calculatePoolApiQueryIdSubquerySubidCalculatePoolPost(id, subid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Установить аналоги для подзапроса
         * @summary Установка аналогов для подзапроса
         * @param {Array<ApartmentCreate>} body 
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnalogsApiQueryIdSubquerySubidAnalogsPost(body: Array<ApartmentCreate>, id: string, subid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).createAnalogsApiQueryIdSubquerySubidAnalogsPost(body, id, subid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить список аналогов для подзапроса
         * @summary Получение аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalogsApiQueryIdSubquerySubidAnalogsGet(id: string, subid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ApartmentGet>>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).getAnalogsApiQueryIdSubquerySubidAnalogsGet(id, subid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Рассчитать аналоги для подзапроса
         * @summary Расчет аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost(id: string, subid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryGet>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost(id, subid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Установить подзапросу выбранные аналоги
         * @summary Установка аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {Analogs} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAnalogsApiQueryIdSubquerySubidUserAnalogsPost(id: string, subid: string, body?: Analogs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubQueryGet>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).setAnalogsApiQueryIdSubquerySubidUserAnalogsPost(id, subid, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Установить эталонный объект для подзапроса
         * @summary Установка эталонного объекта
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {Analog} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBaseApiQueryIdSubquerySubidBaseApartmentPost(id: string, subid: string, body?: Analog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApartmentGet>>> {
            const localVarAxiosArgs = await SubqueryApiAxiosParamCreator(configuration).setBaseApiQueryIdSubquerySubidBaseApartmentPost(id, subid, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubqueryApi - factory interface
 * @export
 */
export const SubqueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Рассчитать аналоги для подзапроса
         * @summary Расчет аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost(id: string, subid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryGet>> {
            return SubqueryApiFp(configuration).calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost(id, subid, options).then((request) => request(axios, basePath));
        },
        /**
         * Рассчитать пул для подзапроса
         * @summary Расчет пула для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculatePoolApiQueryIdSubquerySubidCalculatePoolPost(id: string, subid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryGet>> {
            return SubqueryApiFp(configuration).calculatePoolApiQueryIdSubquerySubidCalculatePoolPost(id, subid, options).then((request) => request(axios, basePath));
        },
        /**
         * Установить аналоги для подзапроса
         * @summary Установка аналогов для подзапроса
         * @param {Array<ApartmentCreate>} body 
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnalogsApiQueryIdSubquerySubidAnalogsPost(body: Array<ApartmentCreate>, id: string, subid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SubqueryApiFp(configuration).createAnalogsApiQueryIdSubquerySubidAnalogsPost(body, id, subid, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список аналогов для подзапроса
         * @summary Получение аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalogsApiQueryIdSubquerySubidAnalogsGet(id: string, subid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ApartmentGet>>> {
            return SubqueryApiFp(configuration).getAnalogsApiQueryIdSubquerySubidAnalogsGet(id, subid, options).then((request) => request(axios, basePath));
        },
        /**
         * Рассчитать аналоги для подзапроса
         * @summary Расчет аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost(id: string, subid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryGet>> {
            return SubqueryApiFp(configuration).recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost(id, subid, options).then((request) => request(axios, basePath));
        },
        /**
         * Установить подзапросу выбранные аналоги
         * @summary Установка аналогов для подзапроса
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {Analogs} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAnalogsApiQueryIdSubquerySubidUserAnalogsPost(id: string, subid: string, body?: Analogs, options?: AxiosRequestConfig): Promise<AxiosResponse<SubQueryGet>> {
            return SubqueryApiFp(configuration).setAnalogsApiQueryIdSubquerySubidUserAnalogsPost(id, subid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Установить эталонный объект для подзапроса
         * @summary Установка эталонного объекта
         * @param {string} id Id запроса
         * @param {string} subid Id подзапроса
         * @param {Analog} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBaseApiQueryIdSubquerySubidBaseApartmentPost(id: string, subid: string, body?: Analog, options?: AxiosRequestConfig): Promise<AxiosResponse<ApartmentGet>> {
            return SubqueryApiFp(configuration).setBaseApiQueryIdSubquerySubidBaseApartmentPost(id, subid, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubqueryApi - object-oriented interface
 * @export
 * @class SubqueryApi
 * @extends {BaseAPI}
 */
export class SubqueryApi extends BaseAPI {
    /**
     * Рассчитать аналоги для подзапроса
     * @summary Расчет аналогов для подзапроса
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost(id: string, subid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryGet>> {
        return SubqueryApiFp(this.configuration).calculateAnalogsApiQueryIdSubquerySubidCalculateAnalogsPost(id, subid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Рассчитать пул для подзапроса
     * @summary Расчет пула для подзапроса
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async calculatePoolApiQueryIdSubquerySubidCalculatePoolPost(id: string, subid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryGet>> {
        return SubqueryApiFp(this.configuration).calculatePoolApiQueryIdSubquerySubidCalculatePoolPost(id, subid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Установить аналоги для подзапроса
     * @summary Установка аналогов для подзапроса
     * @param {Array<ApartmentCreate>} body 
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async createAnalogsApiQueryIdSubquerySubidAnalogsPost(body: Array<ApartmentCreate>, id: string, subid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SubqueryApiFp(this.configuration).createAnalogsApiQueryIdSubquerySubidAnalogsPost(body, id, subid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Получить список аналогов для подзапроса
     * @summary Получение аналогов для подзапроса
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async getAnalogsApiQueryIdSubquerySubidAnalogsGet(id: string, subid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ApartmentGet>>> {
        return SubqueryApiFp(this.configuration).getAnalogsApiQueryIdSubquerySubidAnalogsGet(id, subid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Рассчитать аналоги для подзапроса
     * @summary Расчет аналогов для подзапроса
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost(id: string, subid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryGet>> {
        return SubqueryApiFp(this.configuration).recalculateAnalogsApiQueryIdSubquerySubidRecalculateAnalogsPost(id, subid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Установить подзапросу выбранные аналоги
     * @summary Установка аналогов для подзапроса
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {Analogs} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async setAnalogsApiQueryIdSubquerySubidUserAnalogsPost(id: string, subid: string, body?: Analogs, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubQueryGet>> {
        return SubqueryApiFp(this.configuration).setAnalogsApiQueryIdSubquerySubidUserAnalogsPost(id, subid, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Установить эталонный объект для подзапроса
     * @summary Установка эталонного объекта
     * @param {string} id Id запроса
     * @param {string} subid Id подзапроса
     * @param {Analog} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubqueryApi
     */
    public async setBaseApiQueryIdSubquerySubidBaseApartmentPost(id: string, subid: string, body?: Analog, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApartmentGet>> {
        return SubqueryApiFp(this.configuration).setBaseApiQueryIdSubquerySubidBaseApartmentPost(id, subid, body, options).then((request) => request(this.axios, this.basePath));
    }
}
